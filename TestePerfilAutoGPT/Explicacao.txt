1. Banco de Dados MySQL
Primeiro, crie um banco de dados MySQL para armazenar os perfis dos usuários.

sql
Copiar código
CREATE DATABASE perfil_usuario;

USE perfil_usuario;

CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    idade INT,
    cidade VARCHAR(100),
    habilidades TEXT,
    foto_perfil VARCHAR(255)
);

2. Configuração do Backend com Spring Boot
Dependências do Maven (pom.xml)
Adicione as dependências necessárias para Spring Boot, JPA (Hibernate), MySQL, e Thymeleaf no arquivo pom.xml.

xml
Copiar código

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
</dependencies>
Configuração do Banco de Dados (application.properties)
Adicione as configurações de conexão com o banco de dados no arquivo src/main/resources/application.properties.

properties
Copiar código

spring.datasource.url=jdbc:mysql://localhost:3306/perfil_usuario
spring.datasource.username=root
spring.datasource.password=senha
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

3. Criação de Modelos JPA
Agora, criamos a entidade Usuario para mapear os dados que serão salvos no banco de dados.

Modelo JPA (Usuario.java)
java
Copiar código

package com.exemplo.perfilusuario.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Usuario {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String nome;
    private String email;
    private int idade;
    private String cidade;
    private String habilidades;
    private String fotoPerfil;

    // Getters e Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public int getIdade() {
        return idade;
    }

    public void setIdade(int idade) {
        this.idade = idade;
    }

    public String getCidade() {
        return cidade;
    }

    public void setCidade(String cidade) {
        this.cidade = cidade;
    }

    public String getHabilidades() {
        return habilidades;
    }

    public void setHabilidades(String habilidades) {
        this.habilidades = habilidades;
    }

    public String getFotoPerfil() {
        return fotoPerfil;
    }

    public void setFotoPerfil(String fotoPerfil) {
        this.fotoPerfil = fotoPerfil;
    }
}

4. Criação do Repositório e Serviço
Agora, criamos o repositório JPA para acessar o banco de dados e o serviço para processar a lógica de negócios.

Repositório JPA (UsuarioRepository.java)
java
Copiar código

package com.exemplo.perfilusuario.repository;

import com.exemplo.perfilusuario.model.Usuario;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UsuarioRepository extends JpaRepository<Usuario, Long> {
}
Serviço (UsuarioService.java)
java
Copiar código
package com.exemplo.perfilusuario.service;

import com.exemplo.perfilusuario.model.Usuario;
import com.exemplo.perfilusuario.repository.UsuarioRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class UsuarioService {

    @Autowired
    private UsuarioRepository usuarioRepository;

    public Optional<Usuario> buscarUsuarioPorId(Long id) {
        return usuarioRepository.findById(id);
    }
}

5. Controlador Web e Renderização com Thymeleaf
Agora, criamos o controlador para processar as requisições HTTP e passar os dados para o template Thymeleaf.

Controlador (PerfilController.java)
java
Copiar código

package com.exemplo.perfilusuario.controller;

import com.exemplo.perfilusuario.model.Usuario;
import com.exemplo.perfilusuario.service.UsuarioService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@Controller
public class PerfilController {

    @Autowired
    private UsuarioService usuarioService;

    @GetMapping("/perfil/{id}")
    public String exibirPerfil(@PathVariable Long id, Model model) {
        Usuario usuario = usuarioService.buscarUsuarioPorId(id)
                .orElseThrow(() -> new RuntimeException("Usuário não encontrado"));
        model.addAttribute("usuario", usuario);
        return "perfil";
    }
}
6. Template Thymeleaf para exibir o Perfil
Agora, criamos o template perfil.html que irá exibir os dados do usuário.

Template perfil.html (localizado em src/main/resources/templates/perfil.html)
html
Copiar código

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Perfil de {{usuario.nome}}</title>
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
    <div class="perfil">
        <img src="${usuario.fotoPerfil != null ? usuario.fotoPerfil : 'https://via.placeholder.com/150'}" alt="Foto do Perfil" class="foto-perfil">
        <h1>{{usuario.nome}}</h1>
        <p><strong>Email:</strong> {{usuario.email}}</p>
        <p><strong>Idade:</strong> {{usuario.idade}} anos</p>
        <p><strong>Cidade:</strong> {{usuario.cidade}}</p>
        <p><strong>Habilidades:</strong> {{usuario.habilidades}}</p>
    </div>
</body>
</html>
7. Arquivo CSS (public/css/styles.css)
Aqui está o estilo básico para o perfil:

css
Copiar código

body {
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.perfil {
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 300px;
    padding: 20px;
    text-align: center;
}

.foto-perfil {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    margin-bottom: 15px;
}

h1 {
    font-size: 24px;
    color: #333;
}

p {
    font-size: 16px;
    color: #555;
}

strong {
    color: #333;
}

8. Rodando a Aplicação
Para rodar a aplicação:

Compile o projeto com o comando mvn clean install.
Inicie a aplicação com mvn spring-boot:run.
Acesse http://localhost:8080/perfil/{id} para ver o perfil do usuário, substituindo {id} por um ID válido.